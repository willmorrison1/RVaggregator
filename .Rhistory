"aggregation_file",
"output_directory",
"aggregate_ordinal"),
help = c("Input raster file",
"Input aggreagtion file (lower res than raster, can be raster or .shp)",
"Aggregation type: distribution (continuous data) or fraction (ordinal, discrete data)",
"Output directory: base output directory",
"Cache directory: full path to temporary cache location (deleted after exit)"),
flag = c(FALSE, FALSE, FALSE, TRUE, FALSE))
default_memory_fraction <- 0.2
default_chunk_size <- 20
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory",
"Cache directory: full path to temporary cache location (deleted after exit)"),
flag = c(FALSE, FALSE, FALSE, TRUE))
default_chunk_size <- 20
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE, TRUE))
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
paste("Memory fraction: how much of total system memory to use for raster operations? [0-1]"),
paste("Aggregation chunk size. how many polygons/cells to aggreagte over at one time?
This amount of input_file raw pixels will be loaded into system memory"),
"Aggregation ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list(NA, default_memory_fraction, default_chunk_size, FALSE))
"Cache directory: full path to temporary cache location (deleted after exit)"
getArgParser <- function() {
require(argparser)
default_memory_fraction <- 0.2
default_chunk_size <- 20
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for raster operations? [0-1]",
"Aggregation chunk size. how many polygons/cells to aggreagte over at one time?
This amount of input_file raw pixels will be loaded into system memory",
"Aggregation ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list(NA, default_memory_fraction, default_chunk_size, FALSE))
return(p)
}
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for raster operations? [0-1]",
"Aggregation chunk size. how many polygons/cells to aggreagte over at one time?
This amount of input_file raw pixels will be loaded into system memory",
"Aggregation ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list(NA, default_memory_fraction, default_chunk_size, FALSE))
p
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for raster operations? [0-1]",
"Aggregation chunk size. how many polygons/cells to aggregate over at one time?
This amount of input_file raw pixels will be loaded into system memory",
"Aggregation ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list(NA, default_memory_fraction, default_chunk_size, FALSE))
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for raster operations? [0-1]",
"Aggregation chunk size. how many polygons/cells to aggregate over at one time?
This amount of input_file raw pixels will be loaded into system memory",
"Aggregation ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list("none", default_memory_fraction, default_chunk_size, FALSE))
return(p)
library(RVaggregator)
library(ncdf4)
library(raster)
library(terra)
library(gdalUtils)
library(RVaggregator)
args <- RVaggregator::getArgParser()
require(argparser)
install.packages("argparser")
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
args
default_memory_fraction <- 0.2
default_chunk_size <- 20
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for pre-aggregation raster operations? [0-1]",
"Aggregation chunk size. How many polygons/cells to aggregate over at one time?
The input_file raw pixels covering this number f polygons will be will be loaded into system memory
(more important than memory_fraction)",
"Aggregate ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list("R internal", default_memory_fraction, default_chunk_size, FALSE))
print(p)
p$name
p$description
p$name = "asd"
p$name
p$defaults
argparser::arg_parser(p)
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p$name <- "RVaggregator"
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for pre-aggregation raster operations? [0-1]",
"Aggregation chunk size. How many polygons/cells to aggregate over at one time?
The input_file raw pixels covering this number f polygons will be will be loaded into system memory
(more important than memory_fraction)",
"Aggregate ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list("R internal", default_memory_fraction, default_chunk_size, FALSE))
print(p)
argparser::arg_parser(p)
argparser::include(p)
argparser::parse_args(p)
asd=argparser::parse_args(p)
library(RVaggregator)
library(RVaggregator)
R.version
library(ncdf4)
library(raster)
library(terra)
library(gdalUtils)
library(RVaggregator)
args <- RVaggregator::getArgParser()
args <- RVaggregator::getArgParser()
args <- RVaggregator::getArgParser("asd", "asd1", "asd2")
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p$name <- "RVaggregator"
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for pre-aggregation raster operations? [0-1]",
"Aggregation chunk size. How many polygons/cells to aggregate over at one time?
The input_file raw pixels covering this number f polygons will be will be loaded into system memory
(more important than memory_fraction)",
"Aggregate ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list("R internal", default_memory_fraction, default_chunk_size, FALSE))
p_parsed <- argparser::parse_args(p, argv = c("asd", "asd1", "asd2"))
default_memory_fraction <- 0.2
default_chunk_size <- 20
p <- argparser::arg_parser("RVaggregator. https://github.com/willmorrison1/RVaggregator")
p$name <- "RVaggregator"
p <- argparser::add_argument(parser = p,
arg = c("input_file",
"aggregation_file",
"output_directory"),
help = c("Input raster file",
"Input aggregation file (lower res than raster, can be raster or .shp)",
"Output directory: base output directory"),
flag = c(FALSE, FALSE, FALSE))
p <- argparser::add_argument(p,
arg = c("--cache_directory",
"--memory_fraction",
"--aggregation_chunk_size",
"--aggregate_ordinal"),
help =
c("Cache directory: full path to temporary cache location (deleted after exit)",
"Memory fraction: how much of total system memory to use for pre-aggregation raster operations? [0-1]",
"Aggregation chunk size. How many polygons/cells to aggregate over at one time?
The input_file raw pixels covering this number f polygons will be will be loaded into system memory
(more important than memory_fraction)",
"Aggregate ordinal: Aggregate as fraction (for ordinal, discrete data) or as distribution (continuous data)"),
default = list("R internal", default_memory_fraction, default_chunk_size, FALSE))
p_parsed <- argparser::parse_args(p, argv = c("asd", "asd1", "asd2"))
p_parsed
library(ncdf4)
library(raster)
library(terra)
library(RVaggregator)
library(gdalUtils)
library(RVaggregator)
args <- RVaggregator::getArgParser()
args
p_parsed <- argparser::parse_args(p, argv = c("asd", "asd1", "asd2"))
p_parsed
args
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
p_parsed$aggregation_chunk_size
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
install.packages("tidyr")
install.packages("magittr")
library(mmagrittr)
library(magrittr)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
plot(rast(p_parsed$input_file))
plot(vect(p_parsed$aggregation_file))
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
library(RVaggregator)
source('~/GitHub/RVaggregator/R/functions.R')
RVaggregator::RVaggregator(input_file = p_parsed$input_file,
aggregation_file = p_parsed$aggregation_file,
aggregation_type = ifelse(p_parsed$aggregate_ordinal, "distribution", "fraction"),
output_directory = p_parsed$output_directory,
poly_chunk_size = p_parsed$aggregation_chunk_size)
library(RVaggregator)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/R/functions.R')
RVaggregator(input_file = p_parsed$input_file,
aggregation_file = p_parsed$aggregation_file,
aggregation_type = ifelse(p_parsed$aggregate_ordinal, "distribution", "fraction"),
output_directory = p_parsed$output_directory,
poly_chunk_size = p_parsed$aggregation_chunk_size)
source('~/GitHub/RVaggregator/R/functions.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
RVaggregator
source('~/GitHub/RVaggregator/R/functions.R')
RVaggregator(input_file = p_parsed$input_file,
aggregation_file = p_parsed$aggregation_file,
aggregation_type = ifelse(p_parsed$aggregate_ordinal, "distribution", "fraction"),
output_directory = p_parsed$output_directory,
poly_chunk_size = p_parsed$aggregation_chunk_size)
ifelse(p_parsed$aggregate_ordinal, "distribution", "fraction")
p_parsed$aggregate_ordinal
RVaggregator(input_file = p_parsed$input_file,
aggregation_file = p_parsed$aggregation_file,
aggregation_type = ifelse(p_parsed$aggregate_ordinal, "fraction", "distribution"),
output_directory = p_parsed$output_directory,
poly_chunk_size = p_parsed$aggregation_chunk_size)
traceback()
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
seq_chunks
plot(input_rast)
plot(input_aggregator_shp[seq_chunks[[v]]])
extractedVals
nrow(extractedVals)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/R/functions.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
warnings()
args <- getArgParser()
p_parsed <- argparser::parse_args(args, argv = c("C:/Users/willm/Dropbox/DSM_GLA_1m_EPSG_32631_crop.tif",
"C:/Users/willm/Dropbox/r_agg_tmploc/DSM_AGL_GLA_1m_EPSG_32631/slstr_IR_oblique_vertices.shp", "C:/Users/willm/Desktop"))
args <- getArgParser()
p_parsed <- argparser::parse_args(args, argv = c("C:/Users/willm/Dropbox/DSM_GLA_1m_EPSG_32631_crop.tif",
"C:/Users/willm/Dropbox/r_agg_tmploc/DSM_AGL_GLA_1m_EPSG_32631/slstr_IR_oblique_vertices.shp", "C:/Users/willm/Desktop"))
source('~/GitHub/RVaggregator/R/functions.R')
args <- getArgParser()
p_parsed <- argparser::parse_args(args, argv = c("C:/Users/willm/Dropbox/DSM_GLA_1m_EPSG_32631_crop.tif",
"C:/Users/willm/Dropbox/r_agg_tmploc/DSM_AGL_GLA_1m_EPSG_32631/slstr_IR_oblique_vertices.shp", "C:/Users/willm/Desktop"))
p_parsed
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
library(RVaggregator)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
dir.exists("R asd")
library(RVaggregator)
library(RVaggregator)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
traceback()
p_parsed
!is.na(p_parsed$cache_directory)
dir.exists(p_parsed$cache_directory)
terraOptions()
p_parsed$input_file
ifelse(p_parsed$aggregate_ordinal, "fraction", "distribution")
p_parsed$output_directory
p_parsed$aggregation_chunk_size
source('~/GitHub/RVaggregator/R/functions.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
aggregated_df
length(input_aggregator_shp)
assignedDat
plot(assignedDat)
spplot(assignedDat)
library(RVaggregator)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
library(RVaggregator)
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "data/sample/output",
poly_chunk_size = 5)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "data/sample/output",
poly_chunk_size = 5)
head(aggregated_df)
dim(aggregated_df)
length(input_aggregator_shp)
plot(input_rast)
input_rast
plot(input_rast)
input_aggregator_shp
plot(input_aggregator_shp)
library(terra)
plot(input_aggregator_shp)
input_aggregator_shp
plot(input_aggregator_shp)
input_rast
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "data/sample/output",
poly_chunk_size = 5)
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "data/sample/output",
poly_chunk_size = 5)
plot(input_rast)
library(terra)
plot(input_rast)
input_rast
ncell(input_rast)
library(RVaggregator)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R')
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "data/sample/output",
poly_chunk_size = 5)
RVaggregator(input_file = "../data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "../data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "../data/sample/output",
poly_chunk_size = 5)
plot(rast("../data/sample/sample_input_raster_ordinal.tif"))
library(terra)
plot(rast("../data/sample/sample_input_raster_ordinal.tif"))
getwd()
plot(rast("data/sample/sample_input_raster_ordinal.tif"))
plot(vect(data/sample/sample_shapefile/sample_shapefile.shp))
plot(vect("data/sample/sample_shapefile/sample_shapefile.shp"))
plot(vect(data/sample/sample_shapefile/sample_shapefile.shp))
plot(rast("data/sample/sample_input_raster_ordinal.tif"))
plot(vect(data/sample/sample_shapefile/sample_shapefile.shp), add = TRUE)
plot(vect("data/sample/sample_shapefile/sample_shapefile.shp"), add = TRUE)
plot(vect("data/sample/sample_shapefile/sample_shapefile.shp"))
plot(rast("data/sample/sample_input_raster_ordinal.tif"), add = T)
library(RVaggregator)
RVaggregator(input_file = "../data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "../data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "distribution",
output_directory = "../data/sample/output",
poly_chunk_size = 5)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "../data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "../data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "distribution",
output_directory = "../data/sample/output",
poly_chunk_size = 5)
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "distribution",
output_directory = "data/sample/output",
poly_chunk_size = 5)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/willm/Documents/GitHub/RVaggregator/")
library(RVaggregator)
RVaggregator(input_file = "data/sample/sample_input_raster_ordinal.tif",
aggregation_file = "data/sample/sample_shapefile/sample_shapefile.shp",
aggregation_type = "fraction",
output_directory = "data/sample/output",
poly_chunk_size = 5)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R', echo=TRUE)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R', echo=TRUE)
warnings()
args
p_parsed <- argparser::parse_args(args, c("data/sample/sample_input_raster_ordinal.tif",
"data/sample/sample_shapefile/sample_shapefile.shp",
"data/sample/output",
"--aggregate_ordinal"))
p_parsed <- argparser::parse_args(args, c("data/sample/sample_input_raster_ordinal.tif",
"data/sample/sample_shapefile/sample_shapefile.shp",
"data/sample/output",
"--aggregate_ordinal TRUE"))
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R', echo=TRUE)
p_parsed <- argparser::parse_args(args, c("data/sample/sample_input_raster_ordinal.tif",
"data/sample/sample_shapefile/sample_shapefile.shp",
"data/sample/output",
"--aggregate_ordinal"))
p_parsed <- argparser::parse_args(args, c("data/sample/sample_input_raster_ordinal.tif",
"data/sample/sample_shapefile/sample_shapefile.shp",
"data/sample/output",
"--aggregate_ordinal", TRUE))
p_parsed
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R', echo=TRUE)
source('~/GitHub/RVaggregator/CLI/RVaggregator-CLI.R', echo=TRUE)
